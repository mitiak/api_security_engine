import datetime
import logging

from api_security_engine.lib.alert_handler import AlertHandler
from api_security_engine.lib.models import ThreatSeverity, SecurityEngineAlert

logging.basicConfig(
    format="\033[095m[%(asctime)s] [%(name)s] [%(funcName)s:%(lineno)d] [%(levelname)s]\033[0m\t%(message)s",
    level=logging.INFO
)


class LogAlertHandler(AlertHandler):
    def __init__(self, alert_severity: ThreatSeverity) -> None:
        """
        The function initializes a logger object with the name "log_alert_handler" for logging purposes.

        :param alert_severity: The `alert_severity` parameter is of type `ThreatSeverity`. It is used to specify the
        severity level of the alert
        :type alert_severity: ThreatSeverity
        """
        super().__init__(alert_severity)
        self.logger = logging.getLogger("log_alert_handler")

    async def handle_alert(self, alert: SecurityEngineAlert) -> None:
        """
        The function logs information about a security alert, including the request, module name, threat details, and
        timestamp. The logging is structured in a way that facilitates later analysis.

        :param alert: The `alert` parameter is an instance of the `SecurityEngineAlert` class. It represents a security
        alert generated by the security engine
        :type alert: SecurityEngineAlert
        """
        self.logger.info(
            f"request={alert.request}, module_name={alert.module_name}: {alert.threat_details}. "
            f"time_discovered: {datetime.datetime.fromtimestamp(alert.timestamp)}"
        )
